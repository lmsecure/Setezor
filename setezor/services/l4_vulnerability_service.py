
import aiofiles
from setezor.models.screenshot import Screenshot
from setezor.services.base_service import BaseService
from setezor.unit_of_work.unit_of_work import UnitOfWork
from setezor.models.l4_software_vulnerability_screenshot import L4SoftwareVulnerabilityScreenshot
from setezor.settings import PROJECTS_DIR_PATH
import base64


class L4VulnerabilityService(BaseService):
    async def set_status(self, id:int, status: str, project_id: str) -> list[dict]:
        async with self._uow:
            status = await self._uow.l4_software_vulnerability.edit_one(id=id, data={"confirmed":status})
            await self._uow.commit()
            vuln = await self._uow.l4_software_vulnerability.find_one(id=id)
        return vuln.confirmed


    async def get_screenshots(self, project_id: str, scan_id: str, vuln_id: str) -> list[dict]:
        async with self._uow:
            screenshot_objs = [obj for obj in await self._uow.l4_software_vulnerability_screenshot.filter(project_id=project_id, scan_id=scan_id, l4_software_vulnerability_id=vuln_id) if not obj.deleted_at]
        result = []
        for screenshot in screenshot_objs:
            result.append({
                "id" : screenshot.id,
                "note" : screenshot.note })
        return result


    async def add_screenshot(self, project_id: str, scan_id: str, vuln_id: str, data: dict) -> int:
        screenshot_data = base64.b64decode(data.get("file").split(",")[1])
        save_path = f"{PROJECTS_DIR_PATH}/{project_id}/{scan_id}/screenshots/{data.get("filename")}"
        async with aiofiles.open(save_path, 'wb') as file:
            await file.write(screenshot_data)
        async with self._uow:
            screenshot_model = Screenshot(path=save_path)
            screenshot_obj = self._uow.screenshot.add(screenshot_model.model_dump())
            await self._uow.commit()
            new_obj = L4SoftwareVulnerabilityScreenshot(project_id=project_id, 
                                                        scan_id=scan_id, 
                                                        l4_software_vulnerability_id=vuln_id, 
                                                        note=data.get("note"), 
                                                        screenshot_id=screenshot_obj.id)
            self._uow.l4_software_vulnerability_screenshot.add(data=new_obj.model_dump())
            await self._uow.commit()
            screenshot_objs = [obj for obj in await self._uow.l4_software_vulnerability_screenshot.filter(project_id=project_id, scan_id=scan_id, l4_software_vulnerability_id=vuln_id) if not obj.deleted_at]

        return len(screenshot_objs)


    async def delete_screenshot(self, project_id: str, scan_id: str, id: str) -> int:
        async with self._uow:
            delete_obj = await self._uow.l4_software_vulnerability_screenshot.find_one(project_id=project_id, scan_id=scan_id, id=id)
            await self._uow.l4_software_vulnerability_screenshot.delete(id=id)
            await self._uow.commit()
            screenshot_objs = [obj for obj in await self._uow.l4_software_vulnerability_screenshot.filter(project_id=project_id, scan_id=scan_id, l4_software_vulnerability_id=delete_obj.l4_software_vulnerability_id) if not obj.deleted_at]
        return len(screenshot_objs)


    async def get_screenshot(self, project_id: str, scan_id: str, id: str) -> bytes:
        async with self._uow:
            l4_software_vulnerability_screenshot = await self._uow.l4_software_vulnerability_screenshot.find_one(project_id=project_id, scan_id=scan_id, id=id)
            screenshot_obj = await self._uow.screenshot.find_one(id=l4_software_vulnerability_screenshot.screenshot_id)
        with open(screenshot_obj.path, 'rb') as file:
            return file.read()
